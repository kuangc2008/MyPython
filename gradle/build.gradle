

task hello {
	doLast {
		println 'hello World'
	}
}

//task wrapper(type: Wrapper) {
//	gradleVersion = '3.0'
//}


task printStringClass << {
	def str1 = '单引号'
	def str2 = "双引号"
	println "111 ： " + str1.getClass().name + '$str1'
	println "222　 : " + str2.getClass().name + "$str2"
}

//gradle printStringClass



task printList << {
	def numList = [1, 2, 3,4, 5, 6];
	println numList.getClass().name

	println numList[1]
	println numList[-1]
	println numList[-2]
	println numList[1..3]


	numList.each ({
		print it + '   '
	})

	numList.each(){
		print it + '   '
	}

	numList.each {
		print it + '   '
	}

}


task printMap << {
	def map = ['width' : 1024, 'height':768]
	println map.getClass().name

	println map['width']
	println map.height

	map.each {
		println "Key:${it.key}, Value:${it.value}"
	}
}


task invokeMethod << {
	method1(1,2)
	method1 1,2
}

def method1(int a, int b) {
	println a+b
}



task helloJavaBean << {
	Persion p = new Persion()
	println "name is ${p.name}"
	p.name = "zhangsan"
	println "name is ${p.name}"
}

class Persion {
	private String name
}


// 闭包
task helloClosure << {
	customEach {
		println it
	}

	eachMap { k,v ->
		println "${k} is ${v}"
	}
}

def customEach(closure) {
	for (int i in 1..10) {
		closure(i)
	}
}

// 闭包2 多参数
def eachMap(closure) {
	def map1 = ['width' : 1024, 'height':768]
	map1.each {
		closure(it.key, it.value)
	}
}

// 闭包的委托:  thisObject > owner > delegate
task helloDelegate << {
	new Delegate().test {
		println "this Object : ${thisObject.getClass()}"  //root
		println "owner : ${owner.getClass()}"
		println "delegate: ${delegate.getClass()}"

		method1();   // 使用的是root
		it.method1();  // 使用的是delegate内部的
	}
}

def method1() {
	println "Delegate this:${this.getClass()} in root"
	println "method1 in root"
}

class Delegate {
	def method1() {
		println "Delegate this:${this.getClass()} in Deleaate"
		println "method1 in Delegate"
	}

	def test(Closure<Delegate> closure) {
		closure(this)
	}
}




task configClosure << {
	psrson {
		personName = 'zhangsan'
		personAge = 20
		dumpPersion()
	}
}

class Person {
	String personName
	int personAge

	def dumpPersion() {
		println "name is ${personName}, age is ${personAge}"
	}

}

def psrson(Closure<Person> closure) {
	Person p = new Person();
	closure.delegate = p
	//委托
	closure.setResolveStrategy(Closure.DELEGATE_FIRST);
	closure(p)
}

















